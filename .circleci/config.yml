version: 2.1

### It's a good practice to keep your commands at the top of the config file. In this project, you'll need at least 2 commands:

commands:
# Add a npm install and cd command so I don't have it 100 times thorugh the code
  npm-install:
    parameters:
      end:
        type: string
    steps:
      - run: 
          name: Install << parameters.end >> dependencies
          command: |
            cd << parameters.end >>
            npm i

  destroy-environment:
    steps:
      - run:
          name: Destroy backend
          command: |
            aws cloudformation delete-stack --stack-name backend-${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail
      - run:
          name: Destroy frontend
          command: |
            aws s3 rm s3://udapeople-frontend-deployment-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            aws cloudformation delete-stack --stack-name frontend-${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail

  revert-migrations:
    steps:
      - run:
          name: install backend dependencies
          command: |
            cd backend
            npm i
          when: on_fail
      - run:
          name: Revert database migration if it has already ran
          command: |
            if curl -H "token: 64feb3bf-1926-4aec-90fc-ec721a0f8ad6" --request GET https://api.memstash.io/values/${CIRCLE_WORKFLOW_ID:0:7} | grep "true"
            then 
              cd backend
              npm run migrations:revert
            else 
              echo "no revert migration needed"
            fi
          when: on_fail


orbs:
  slack: circleci/slack@3.4.2
  aws-cli: circleci/aws-cli@1.3.0

jobs:
  build-frontend:
    docker:
      - image: circleci/node
    steps:
      - checkout
      - npm-install:
          end: frontend
      - run: 
          name: Building Frontend
          command: | 
            cd frontend && npm run build
      - slack/notify-on-failure

  build-backend:
    docker:
      - image: circleci/node
    steps:
      - checkout
      - npm-install:
          end: backend
      - run: 
          name: Building Backend
          command: |
            cd backend && npm run build
      - run:
          name: Copy backend for Ansible
          command: |
              mkdir /tmp/saveme
              cp ./backend/package.json /tmp/saveme/
              cd backend/dist
              tar -zcvf /tmp/saveme/backend.tar.gz ./
              ls -l /tmp/saveme/backend.tar.gz
      - persist_to_workspace:
          root: /tmp/saveme
          paths:
            - backend.tar.gz
            - package.json
      - slack/notify-on-failure

  test-frontend:
    docker:
      - image: circleci/node
    steps:
      - checkout
      - npm-install:
          end: "frontend"
      - run:
          name: Test Frontend
          command: |
            cd frontend
            mkdir -p ./reports/junit/
            npm install --save-dev jest-junit jest-junit-reporter
            ./node_modules/.bin/jest --ci --runInBand --reporters=default --reporters=jest-junit
          environment:
            JEST_JUNIT_OUTPUT_DIR: "./reports/junit/"
      - store_test_results:
          path: ./frontend/reports/junit/
      - slack/notify-on-failure

  test-backend:
    docker:
      - image: circleci/node
    steps:
      - checkout
      - npm-install:
          end: "backend"
      - run:
          name: Test Backend
          command: |
            cd backend
              mkdir -p ./reports/junit/
              npm install --save-dev jest-junit jest-junit-reporter
              ./node_modules/.bin/jest --ci --runInBand --reporters=default --reporters=jest-junit
          environment:
            JEST_JUNIT_OUTPUT_DIR: "./reports/junit/"
      - store_test_results:
          path: ./backend/reports/junit/
      - slack/notify-on-failure

  audit-frontend:
    docker:
      - image: circleci/node
    steps:
      - checkout
      - npm-install:
          end: "frontend"
      - run:
          name: Audit Frontend
          command: |
            cd frontend
            npm audit fix --audit-level=critical --force
      - slack/notify-on-failure

  audit-backend:
    docker:
      - image: circleci/node
    steps:
      - checkout
      - npm-install:
          end: "backend"
      - run:
          name: Audit Backend
          command: |
            cd backend
            npm audit fix --audit-level=critical --force
      - slack/notify-on-failure

  deploy-infrastructure:
    executor: aws-cli/default
    steps:
      - checkout
      - aws-cli/setup:
          profile-name: default
      - run: mkdir /tmp/saveme
      - run:
          name: Deploy backend infra
          command: |
            cd .circleci/files
            aws cloudformation deploy \
              --template-file backend.yml \
              --stack-name "backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="backend-deployment-${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Get and save public DNS of EC2 instance to https://memstash.io/
          command: |
            PUBLIC_DNS=$(aws ec2 describe-instances --region ${AWS_DEFAULT_REGION} \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --query "Reservations[*].Instances[0].PublicDnsName" \
            --output text) > /tmp/saveme/public_dns.txt
      - persist_to_workspace:
          root: /tmp/saveme
          paths:
            - public_dns.txt           
      - run:
          name: Backend failure describe
          command: |
            aws cloudformation describe-stack-events --stack-name "backend-${CIRCLE_WORKFLOW_ID:0:7}"
          when: on_fail        
      - run:
          name: Save URL
          command: |
            aws ec2 describe-instances --filters "Name=tag:Name,Values=backend-backend-deployment-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query "Reservations[*].Instances[*].[PublicDnsName]" \
              --output text > /tmp/saveme/backend_url.txt
      - persist_to_workspace:
          root: /tmp/saveme
          paths:
            - backend_url.txt
      - run:
          name: Save old bucket arn
          command: echo "arn:aws:s3:::`aws s3 ls | awk '{ print $3 } ' | grep udapeople-frontend-deployment`" > /tmp/saveme/old_s3arn.txt
      - persist_to_workspace:
          root: /tmp/saveme
          paths:
            - old_s3arn.txt
      - run:
          name: Deploy frontend infra
          command: |
            cd .circleci/files
            aws cloudformation deploy --template-file frontend.yml \
              --stack-name "frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="frontend-deployment-${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udacity
      - run:
          name: Frontend failure describe
          command: |
            aws cloudformation describe-stack-events --stack-name "frontend-${CIRCLE_WORKFLOW_ID:0:7}"
          when: on_fail

  configure-infrastructure:
    docker:
    - image: alpine:latest
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["c6:a2:0f:81:1c:df:36:15:ed:4e:bf:a0:3c:d0:28:29"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install Ansible
          command: |
            apk add --update ansible
            apk add --update bash
            ansible-galaxy install weareinteractive.environment
      - run:
          name: Make inventory for Ansible
          command: |
            echo "[backend]" > .circleci/ansible/inventory.txt
            cat /tmp/saveme/backend_url.txt >> .circleci/ansible/inventory.txt
            echo .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - run:
          name: Run playbook
          command: |
            ls -l /tmp/saveme
            cd .circleci/ansible
            ansible-playbook -i inventory.txt main.yml
      - persist_to_workspace:
          root: /tmp/saveme
          paths:
            - backend_url.txt

  run-migrations:
    docker:
      - image: circleci/node
    steps:
      - checkout
      - npm-install:
          end: "backend"
      - run:
          name: Run DB Migration
          command: |
            cd backend && npm install
            npm run migrations
      - run:
          name: Log to memstash
          command: |
            curl -H "Content-Type: text/plain" -H "token: c1aa84a9-6f2b-46c5-9d1a-01ea661a629d" --request PUT --data "true" https://api.memstash.io/values/${CIRCLE_WORKFLOW_ID:0:7}

  prepare-frontend-for-deployment:
    docker:
      - image: circleci/node
    steps:
      - attach_workspace:
          at: /tmp/saveme
      - checkout
      - npm-install:
          end: "frontend"
      - run:
          name: Build frontend
          command: |
            BACKEND_URL=$(cat /tmp/saveme/backend_url.txt)
            echo BACKEND_URL: ${BACKEND_URL}
            export API_URL=http://${BACKEND_URL}:3030
            cd frontend            
            npm run build
      - run:
          name: Compress build files
          command: |
            cd frontend/dist
            tar -zcvf /tmp/saveme/frontend.tar.gz ./
      - persist_to_workspace:
          root: /tmp/saveme
          paths:
            - frontend.tar.gz

  deploy-frontend:
      executor: aws-cli/default
      steps:
        - aws-cli/setup:
            profile-name: default
        - attach_workspace:
            at: /tmp/saveme
        - run:
            name: Extract frontend build
            command: |
              echo `ls /tmp/saveme`
              mkdir ~/frontend
              cp /tmp/saveme/frontend.tar.gz ~/frontend
              cd ~/frontend
              tar -zxvf frontend.tar.gz
              echo `ls -la`
        - run:
            name: deploy to s3 bucket
            command: |
              cd ~/frontend
              aws s3 sync . s3://udapeople-frontend-deployment-${CIRCLE_WORKFLOW_ID:0:7}


  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - attach_workspace:
            at: /tmp/saveme
      - checkout
      - run:
          name: Install system dependencies
          command: |
            apk add --no-cache curl
            apk add --no-cache --upgrade bash
            apk add --no-cache --update ansible
            apk add --no-cache openssh-client
            pip3 install awscli
      - run:
          name: Smoke test on frontend
          command: |
            URL="http://udapeople-s3bucket-${CIRCLE_WORKFLOW_ID}.s3-website.us-east-2.amazonaws.com/#/employees"
            if curl -s ${URL} | grep "Welcome"
            then
              return 0
            else
              return 1
            fi
      - run:
          name: Smoke test on backend
          command: |
            PUBLIC_DNS=$(cat /tmp/saveme/public_dns.txt)
            echo ${PUBLIC_DNS}
            if curl -s "http://${PUBLIC_DNS}:3030/api/status" | grep "ok"
            then
              return 0
            else
              return 1
            fi
      - destroy-environment
      - revert-migrations
      - slack/status


  # backend-smoke-tests:
  #   docker:
  #     - image: alpine:latest
  #   steps:
  #     # - attach_workspace:
  #     #     at: /tmp/saveme
  #     - checkout
  #     - run: apk add --update curl
  #     - run: apk add aws-cli
  #     - run: apk add --update nodejs npm
  #     - run:
  #         name: Backend API check
  #         command: |
  #           BACKEND_IP=$(aws ec2 describe-instances \
  #           --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
  #           --query 'Reservations[*].Instances[*].PublicIpAddress' \
  #           --output text)
  #           curl "http://${BACKEND_IP}:3030/api/status"
  #     # - destroy-environment
  #     # - revert-migrations
  #     - slack/notify-on-failure

  # frontend-smoke-test:
  #   docker:
  #     - image: alpine:latest
  #   steps:
  #     - checkout
  #     - run: apk add --update curl
  #     - run: apk add aws-cli
  #     - run: apk add --update nodejs npm
  #     - run: apk add bash
  #     - run:
  #         name: Frontend smoke test
  #         command: |
  #           URL="http://udapeople-frontend-deployment-${CIRCLE_WORKFLOW_ID:0:7}.s3.eu-central-1.amazonaws.com/index.html#/employees"              
  #           if curl -s ${URL} | grep "Welcome"
  #           then
  #             return 0
  #           else
  #             return 1
  #           fi 
  #     - destroy-environment
  #     - revert-migrations
  #     - slack/notify-on-failure


#  cloudfront-update

workflows:
  UdaPeople:
    jobs:
      - build-frontend
      - build-backend
      #Add these back later. Need to save on build time for Ansible testing
      # - test-frontend:
      #     requires:
      #     - build-frontend
      # - test-backend:
      #     requires:
      #       - build-backend
      # - audit-frontend:
      #     requires:
      #       - test-frontend
      # - audit-backend:
      #     requires:
      #       - test-backend
      - deploy-infrastructure:
          requires:
          - build-frontend
          - build-backend
          # Add these back and remove above
          # - audit-frontend
          # - audit-backend
      - configure-infrastructure:
          requires:
            - deploy-infrastructure
      - run-migrations:
          requires:
            - configure-infrastructure
      - prepare-frontend-for-deployment:
          requires:
            - configure-infrastructure
      - deploy-frontend:
          requires:
            - prepare-frontend-for-deployment
      - smoke-test:
          requires:
              - run-migrations
              - deploy-frontend
              - configure-infrastructure

      # - backend-smoke-tests:
      #     requires:
      #         - run-migrations
      #         - deploy-frontend
      # - frontend-smoke-test:
      #     requires:
      #         - deploy-frontend
      # - cloudfront-update:
      #     requires:
      #         - frontend-smoke-test
      #         - backend-smoke-tests