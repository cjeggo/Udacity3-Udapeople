version: 2.1

### It's a good practice to keep your commands at the top of the config file. In this project, you'll need at least 2 commands:

commands:
# Add a npm install and cd command so I don't have it 100 times thorugh the code
  npm-install:
    parameters:
      end:
        type: string
    steps:
      - run: 
          name: Install << parameters.end >> dependencies
          command: |
            cd << parameters.end >>
            npm i

# commands:
#   destroy-environment:
#     description: Destroy backend and frontend cloudformation stacks given a workflow ID.
#     ...

#   revert-migration:
#     description: Revert the last migration if successfully run in the current workflow.
#     ...

orbs:
  slack: circleci/slack@3.4.2
  aws-cli: circleci/aws-cli@1.3.0

jobs:
  build-frontend:
    docker:
      - image: circleci/node
    steps:
      - checkout
      - npm-install:
          end: frontend
      - run: 
          name: Building Frontend
          command: | 
            cd frontend && npm run build
      - slack/notify-on-failure


  build-backend:
    docker:
      - image: circleci/node
    working_directory: ~/backend
    steps:
      - checkout
      - npm-install:
          end: backend
      - run: 
          name: Building Backend
          command: |
            cd backend && npm run build
      - slack/notify-on-failure


  test-frontend:
    docker:
      - image: circleci/node
    steps:
      - checkout
      - npm-install:
          end: "frontend"
      - run:
          name: Test Frontend
          command: |
            cd frontend
            mkdir -p ./reports/junit/
            npm install --save-dev jest-junit jest-junit-reporter
            ./node_modules/.bin/jest --ci --runInBand --reporters=default --reporters=jest-junit
          environment:
            JEST_JUNIT_OUTPUT_DIR: "./reports/junit/"
      - store_test_results:
          path: ./frontend/reports/junit/
      - slack/notify-on-failure

  test-backend:
    docker:
      - image: circleci/node
    steps:
      - checkout
      - npm-install:
          end: "backend"
      - run:
          name: Test Backend
          command: |
            cd backend
              mkdir -p ./reports/junit/
              npm install --save-dev jest-junit jest-junit-reporter
              ./node_modules/.bin/jest --ci --runInBand --reporters=default --reporters=jest-junit
          environment:
            JEST_JUNIT_OUTPUT_DIR: "./reports/junit/"
      - store_test_results:
          path: ./backend/reports/junit/
      - slack/notify-on-failure

  audit-frontend:
    docker:
      - image: circleci/node
    steps:
      - checkout
      - npm-install:
          end: "frontend"
      - run:
          name: Audit Frontend
          command: |
            cd frontend
            npm audit fix --audit-level=critical --force
      - slack/notify-on-failure

  audit-backend:
    docker:
      - image: circleci/node
    steps:
      - checkout
      - npm-install:
          end: "backend"
      - run:
          name: Audit Backend
          command: |
            cd backend
            npm audit fix --audit-level=critical --force
      - slack/notify-on-failure

  deploy-infrastructure:
    executor: aws-cli/default
    steps:
      - checkout
      - aws-cli/setup:
          profile-name: default
      - run: mkdir /tmp/saveme
      - run:
          name: Deploy backend infra
          command: |
            cd .circleci/files
            aws cloudformation deploy \
              --template-file backend.yml \
              --stack-name "backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="backend-deployment-${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Save URL
          command: |
            aws ec2 describe-instances --filters "Name=tag:Name,Values=backend-backend-deployment-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query "Reservations[*].Instances[*].[PublicDnsName]" \
              --output text > /tmp/saveme/backend_url.txt
      - persist_to_workspace:
          root: /tmp/saveme
          paths:
            - backend_url.txt
      - run:
          name: Save old bucket arn
          command: echo "arn:aws:s3:::`aws s3 ls | awk '{ print $3 } ' | grep udapeople-frontend-deployment`" > /tmp/saveme/old_s3arn.txt
      - persist_to_workspace:
          root: /tmp/saveme
          paths:
            - old_s3arn.txt
      - run:
          name: Create frontend infrastructure
          command: |
            cd .circleci/files
            aws cloudformation deploy --template-file frontend.yml \
              --stack-name "frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="frontend-deployment-${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udacity
      - run:
          name: On failure
          command: |
            aws cloudformation describe-stack-events --stack-name "frontend-${CIRCLE_WORKFLOW_ID:0:7}"
          when: on_fail
      - slack/notify-on-failure

#  configure-infrastructure:

#  run-migrations:

#  deploy-frontend:

#  deploy-backend:  

#  smoke-test:

#  cloudfront-update:

workflows:
  Build & Test:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend
      - test-backend
  Audit:
    jobs:
      - audit-frontend
      - audit-backend
  Deploy Infra:
    jobs:
      - deploy-infrastructure:
          requires:
          - build-frontend
          - build-backend
          - test-frontend
          - test-backend
          - audit-frontend
          - audit-backend