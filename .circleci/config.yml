version: 2.1

commands:
  destroy-environment:
    steps:
      - run:
          name: Destroy backend
          command: |
            aws cloudformation delete-stack --stack-name backend-${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail
      - run:
          name: Destroy frontend
          command: |
            aws s3 rm s3://udapeople-frontend-deployment-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            aws cloudformation delete-stack --stack-name frontend-${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail

  write-envvars-file:
    description: Command used for creating env file
    steps:
      - run:
          name: Add env vars to env file
          command: |
            echo "ENVIRONMENT=production" >> backend/.env
            echo "VERSION=1" >> backend/.env
            echo "TYPEORM_CONNECTION=${TYPEORM_CONNECTION}" >> backend/.env
            echo "TYPEORM_MIGRATIONS_DIR=${TYPEORM_MIGRATIONS_DIR}" >> backend/.env
            echo "TYPEORM_ENTITIES=${TYPEORM_ENTITIES}" >> backend/.env
            echo "TYPEORM_MIGRATIONS=${TYPEORM_MIGRATIONS}" >> backend/.env
            echo "TYPEORM_HOST=${TYPEORM_HOST}" >> backend/.env
            echo "TYPEORM_PORT=${TYPEORM_PORT}" >> backend/.env
            echo "TYPEORM_USERNAME=${TYPEORM_USERNAME}" >> backend/.env
            echo "TYPEORM_PASSWORD=${TYPEORM_PASSWORD}" >> backend/.env
            echo "TYPEORM_DATABASE=${TYPEORM_DATABASE}" >> backend/.env

#   revert-migrations:
#     description: Revert the last migration if successfully run in the current workflow.
#     parameters:
#       # Add parameter here     
#     steps:
#       - run:
#           name: Revert migrations
#           # Add when this will run
#           command: |
#             # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
#             SUCCESS = 1
#             if(( $SUCCESS==1 )); 
#             then
#             #  cd ~/project/backend
#             #  npm install
#             #  Add revert code here. You can find this in the Getting Started section.
#               exit 1
#             fi

orbs:
  slack: circleci/slack@3.4.2
  aws-cli: circleci/aws-cli@1.3.0

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      # - restore_cache:
      #     keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm i
            mkdir /tmp/frontend
            cp -r . /tmp/frontend
            ls -al /tmp/frontend
      - persist_to_workspace:
          root: /tmp
          paths:
            - frontend/*
      # - save_cache:
      #     paths: [frontend/node_modules]
      #     key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      # - restore_cache:
      #     keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            mkdir /tmp/backend
            cd backend/ && npm i && npm run build
            tar -zcvf /tmp/backend/backend.tar.gz ./
      - persist_to_workspace:
          root: /tmp
          paths:
            - backend/*
      # - save_cache:
      #     paths: [backend/node_modules]
      #     key: backend-build

  test-frontend:
    docker:
      - image: circleci/node
    steps:
      - checkout
      # - restore_cache:
      #     key: frontend-build
      - run:
          name: test-frontend
          command: |
            cd frontend
            npm i
            mkdir -p ./reports/junit/
            npm install --save-dev jest-junit jest-junit-reporter
            ./node_modules/.bin/jest --ci --runInBand --reporters=default --reporters=jest-junit
          environment:
            JEST_JUNIT_OUTPUT_DIR: "./reports/junit/"
      - store_test_results:
          path: ./frontend/reports/junit/
      # - slack/notify-on-failure
              
  test-backend:
    docker:
      - image: circleci/node
    steps:
      - checkout
      # - restore_cache:
      #     key: backend-build
      - run:
          name: Test Backend
          command: |
            cd backend
            npm i
            mkdir -p ./reports/junit/
            npm install --save-dev jest-junit jest-junit-reporter
            ./node_modules/.bin/jest --ci --runInBand --reporters=default --reporters=jest-junit
          environment:
            JEST_JUNIT_OUTPUT_DIR: "./reports/junit/"
      - store_test_results:
          path: ./backend/reports/junit/
      # - slack/notify-on-failure
            
  scan-frontend:
    docker:
      - image: circleci/node
    steps:
      - checkout
      # - restore_cache:
      #     key: frontend-build
      - run:
          name: Audit Frontend
          command: |
            cd frontend
            npm audit fix --audit-level=critical --force
      # - slack/notify-on-failure

  scan-backend:
    docker:
      - image: circleci/node
    steps:
      - checkout
      # - restore_cache:
      #     key: backend-build
      - run:
          name: Audit Backend
          command: |
            cd backend
            npm audit fix --audit-level=critical --force
      # - slack/notify-on-failure

  deploy-infrastructure:
    executor: aws-cli/default
    steps:
      - checkout
      - aws-cli/setup:
          profile-name: default
      - run: mkdir /tmp/saveme
      - run:
          name: Deploy backend infra
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/backend.yml \
            --tags project=Udapeople-backend \
            --stack-name "backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Deploy frontend infra
          command: |
            aws cloudformation deploy --template-file .circleci/files/frontend.yml \
              --stack-name "frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=Udapeople-Frontend

      - run:
          name: Backend IP to Inventory
          command: |
            echo "[backend]" > /tmp/saveme/inventory.txt
            aws ec2 describe-instances --filters "Name=tag:project,Values=Udapeople-backend" \
            --filters "Name=instance-state-name,Values=running" \
            --query "Reservations[*].Instances[*].[PublicIpAddress]" \
            --output text >> /tmp/saveme/inventory.txt
            cat /tmp/saveme/inventory.txt
      # - save_cache:
      #     key: inventoryv1
      #     paths:
      #       - /tmp/saveme/inventory.txt
      # - persist_to_workspace:
      #     root: /tmp/saveme
      #     paths:
      #       - inventory.txt
      - run:
          name: Backend failure describe
          command: |
            aws cloudformation describe-stack-events --stack-name "backend-${CIRCLE_WORKFLOW_ID:0:7}"
          when: on_fail        
      - run:
          name: Save old bucket arn
          command: echo "arn:aws:s3:::`aws s3 ls | awk '{ print $3 } ' | grep udapeople-frontend-deployment`" > /tmp/saveme/old_s3arn.txt
      - run: 
          name: validate /tmp/saveme files
          command: |
            ls -al /tmp/saveme
      - persist_to_workspace:
          root: /tmp
          paths:
            - saveme/*    
      - run:
          name: Frontend failure describe
          command: |
            aws cloudformation describe-stack-events --stack-name "frontend-${CIRCLE_WORKFLOW_ID:0:7}"
          when: on_fail
      - destroy-environment 

  configure-infrastructure:
    docker:
    - image: alpine:latest
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["c6:a2:0f:81:1c:df:36:15:ed:4e:bf:a0:3c:d0:28:29"]
      - attach_workspace:
          at: /tmp
      - checkout
      # - restore_cache:
      #     keys: 
      #     - backend-build
      #     - inventoryv1
      # - checkout
      - run:
          name: Install Ansible
          command: |
            apk add --update ansible
            apk add --update bash
            ansible-galaxy install weareinteractive.environment
      - write-envvars-file
      - run:
          name: Run playbook
          command: |
            cat /tmp/saveme/inventory.txt
            cd .circleci/ansible
            ansible-playbook -i /tmp/saveme/inventory.txt configure-server.yml
    
  run-migrations:
    docker:
      - image: circleci/node
    steps:
      - checkout
      - write-envvars-file
      # - npm-install:
      #     end: "backend"
      - run:
          name: Run DB Migration
          command: |
            cd backend
            npm i
            npm run migrations
      - run:
          name: Log to memstash
          command: |
            curl -H "Content-Type: text/plain" -H "token: c1aa84a9-6f2b-46c5-9d1a-01ea661a629d" --request PUT --data "true" https://api.memstash.io/values/${CIRCLE_WORKFLOW_ID:0:7}
#      # Here's where you will add some code to rollback on failure      



  deploy-frontend:
    docker:
        - image: python:3.7-alpine3.11
    steps:
      - checkout
      - attach_workspace:
          at: /tmp
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --no-cache nodejs
            apk add --no-cache npm
            apk add --no-cache bash
            apk add --no-cache curl
            pip install awscli
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --filters "Name=tag:project,Values=Udapeople-backend" \
            --filters "Name=instance-state-name,Values=running" \
            --query "Reservations[*].Instances[*].[PublicIpAddress]" \
            --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            npm install webpack-dev-server -g
            echo "${API_URL}"
            cd /tmp/frontend
            echo "${API_URL}"
            npm i
            echo "${API_URL}"
            npm run build
            echo "${API_URL}"
      # - run:
      #     name: "Baking backend API_URL into the frontend"
      #     command: |
      #         echo "${API_URL}"
      #         npm install webpack-dev-server -g
      #         cd /tmp/frontend
      #         npm i
      #         npm run build
      #         npm audit fix --audit-level=critical --force
      - run:
          name: deploy to s3 bucket
          command: 
            cd /tmp/frontend/dist
            aws s3 cp . s3://udapeople-frontend-deployment-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - persist_to_workspace:
          root: /tmp
          paths:
            - saveme/* 
      - destroy-environment
     
                    
  deploy-backend:
    docker:
      - image: alpine:latest
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["c6:a2:0f:81:1c:df:36:15:ed:4e:bf:a0:3c:d0:28:29"]
      - attach_workspace:
          at: /tmp
      - checkout
      - run:
          name: Install Ansible
          command: |
            apk add --update ansible
            apk add --update bash
            ansible-galaxy install weareinteractive.environment
      - run:
          name: Run playbook
          command: |
            cat /tmp/saveme/inventory.txt
            cd .circleci/ansible
            ansible-playbook -i /tmp/saveme/inventory.txt deploy-backend.yml


#   smoke-test:
#     docker:
#       # Lightweight Docker image 
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Get backend url
#           command: |
#             # your code here
#       - run:
#           name: Backend smoke test.
#           command: |
#             # your code here
#       - run:
#           name: Frontend smoke test.
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

  cloudfront-update:
    executor: aws-cli/default
    steps:
      - aws-cli/setup:
          profile-name: default
      - checkout
      - run:
          name: Promote to production
          command: |
              aws cloudformation deploy \
                --template-file .circleci/files/cloudfront.yml \
                --stack-name udapeople-cloudfront \
                --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}"
          no_output_timeout: 20m
      - destroy-environment
#   cloudfront-update:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      - deploy-infrastructure:
          # requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          requires: [build-frontend, build-backend]
          # filters:
          #   branches:
          #     only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]