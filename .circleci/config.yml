version: 2.1

### It's a good practice to keep your commands at the top of the config file. In this project, you'll need at least 2 commands:

commands:
# Add a npm install and cd command so I don't have it 100 times thorugh the code
  npm-install:
    parameters:
      end:
        type: string
    steps:
      - run: 
          name: Install << parameters.end >> dependencies
          command: |
            cd << parameters.end >>
            npm i


# commands:
#   destroy-environment:
#     description: Destroy backend and frontend cloudformation stacks given a workflow ID.
#     ...

#   revert-migration:
#     description: Revert the last migration if successfully run in the current workflow.
#     ...

orbs:
  slack: circleci/slack@3.4.2
  aws-cli: circleci/aws-cli@1.3.0

jobs:
  build-frontend:
    docker:
      - image: circleci/node
    steps:
      - checkout
      - npm-install:
          end: frontend
      - run: 
          name: Building Frontend
          command: | 
            cd frontend && npm run build
      - slack/notify-on-failure

  build-backend:
    docker:
      - image: circleci/node
    working_directory: ~/backend
    steps:
      - checkout
      - npm-install:
          end: backend
      - run: 
          name: Building Backend
          command: |
            cd backend && npm run build
      - slack/notify-on-failure

  test-frontend:
    docker:
      - image: circleci/node
    steps:
      - checkout
      - npm-install:
          end: "frontend"
      - run:
          name: Test Frontend
          command: |
            cd frontend
            mkdir -p ./reports/junit/
            npm install --save-dev jest-junit jest-junit-reporter
            ./node_modules/.bin/jest --ci --runInBand --reporters=default --reporters=jest-junit
          environment:
            JEST_JUNIT_OUTPUT_DIR: "./reports/junit/"
      - store_test_results:
          path: ./frontend/reports/junit/
      - slack/notify-on-failure

  test-backend:
    docker:
      - image: circleci/node
    steps:
      - checkout
      - npm-install:
          end: "backend"
      - run:
          name: Test Backend
          command: |
            cd backend
              mkdir -p ./reports/junit/
              npm install --save-dev jest-junit jest-junit-reporter
              ./node_modules/.bin/jest --ci --runInBand --reporters=default --reporters=jest-junit
          environment:
            JEST_JUNIT_OUTPUT_DIR: "./reports/junit/"
      - store_test_results:
          path: ./backend/reports/junit/
      - slack/notify-on-failure

  audit-frontend:
    docker:
      - image: circleci/node
    steps:
      - checkout
      - npm-install:
          end: "frontend"
      - run:
          name: Audit Frontend
          command: |
            cd frontend
            npm audit fix --audit-level=critical --force
      - slack/notify-on-failure

  audit-backend:
    docker:
      - image: circleci/node
    steps:
      - checkout
      - npm-install:
          end: "backend"
      - run:
          name: Audit Backend
          command: |
            cd backend
            npm audit fix --audit-level=critical --force
      - slack/notify-on-failure

  deploy-infrastructure:
    executor: aws-cli/default
    steps:
      - checkout
      - aws-cli/setup:
          profile-name: default
      - run: mkdir /tmp/saveme
      - run:
          name: Deploy backend infra
          command: |
            cd .circleci/files
            aws cloudformation deploy \
              --template-file backend.yml \
              --stack-name "backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="backend-deployment-${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Backend failure describe
          command: |
            aws cloudformation describe-stack-events --stack-name "backend-${CIRCLE_WORKFLOW_ID:0:7}"
          when: on_fail        
      - run:
          name: Save URL
          command: |
            aws ec2 describe-instances --filters "Name=tag:Name,Values=backend-backend-deployment-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query "Reservations[*].Instances[*].[PublicDnsName]" \
              --output text > /tmp/saveme/backend_url.txt
      - persist_to_workspace:
          root: /tmp/saveme
          paths:
            - backend_url.txt
      - run:
          name: Save old bucket arn
          command: echo "arn:aws:s3:::`aws s3 ls | awk '{ print $3 } ' | grep udapeople-frontend-deployment`" > /tmp/saveme/old_s3arn.txt
      - persist_to_workspace:
          root: /tmp/saveme
          paths:
            - old_s3arn.txt
      - run:
          name: Deploy frontend infra
          command: |
            cd .circleci/files
            aws cloudformation deploy --template-file frontend.yml \
              --stack-name "frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="frontend-deployment-${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udacity
      - run:
          name: Frontend failure describe
          command: |
            aws cloudformation describe-stack-events --stack-name "frontend-${CIRCLE_WORKFLOW_ID:0:7}"
          when: on_fail
      - slack/notify-on-failure

  configure-infrastructure:
    docker:
    - image: alpine:latest
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["01:35:e6:42:d4:49:a7:30:0d:42:4e:91:b8:1d:82:1c:03:86:5b:15"]
      - attach_workspace:
          at: /tmp/saveme
      - run:
          name: Make inventory for Ansible
          command: |
            echo "[backend]" > .circleci/ansible/inventory.txt
            cat /tmp/save/backend_url.txt >> .circleci/ansible/inventory.txt
            echo .circleci/ansible/inventory.txt
      - run:
          name: Run playbook
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt main.yml
      - persist_to_workspace:
          root: /tmp/saveme
          paths:
            - backend_url.txt
      - slack/notify-on-failure

  run-migrations:
    docker:
      - image: circleci/node
    steps:
      - checkout
      - npm-install:
          end: "backend"
      - run:
          name: Run DB Migration
          command: |
            cd backend
            npm run migrations
      - run:
          name: Log to memstash
          command: |
            curl -H "Content-Type: text/plain" -H "token: c1aa84a9-6f2b-46c5-9d1a-01ea661a629d" --request PUT --data "true" https://api.memstash.io/values/${CIRCLE_WORKFLOW_ID:0:7}
      - slack/notify-on-failure

  prepare-frontend-for-deployment:
    docker:
      - image: circleci/node
    steps:
      - attach_workspace:
          at: /tmp/saveme
      - checkout
      - install-dependencies:
          end: "frontend"
      - run:
          name: Build frontend
          command: |
            BACKEND_URL=$(cat /tmp/saveme/backend_url.txt)
            echo BACKEND_URL: ${BACKEND_URL}
            export API_URL=http://${BACKEND_URL}:3030
            cd frontend            
            npm run build
      - run:
          name: Compress build files
          command: |
            cd frontend/dist
            tar -zcvf /tmp/saveme/frontend.tar.gz ./
      - persist_to_workspace:
          root: /tmp/saveme
          paths:
            - frontend.tar.gz
      - slack/notify-on-failure

  deploy-frontend:
      executor: aws-cli/default
      steps:
        - aws-cli/setup:
            profile-name: default
        - attach_workspace:
            at: /tmp/saveme
        - run:
            name: Extract frontend build
            command: |
              echo `ls /tmp/saveme`
              mkdir ~/frontend
              cp /tmp/saveme/frontend.tar.gz ~/frontend
              cd ~/frontend
              tar -zxvf frontend.tar.gz
              echo `ls -la`
        - run:
            name: deploy to s3 bucket
            command: |
              cd ~/frontend
              aws s3 sync . s3://udapeople-frontend-deployment-${CIRCLE_WORKFLOW_ID:0:7}

#  deploy-backend:  

#  smoke-test:

#  cloudfront-update:

workflows:
  UdaPeople:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires:
          - build-frontend
      - test-backend:
          requires:
            - build-backend
      - audit-frontend:
          requires:
            - test-frontend
      - audit-backend:
          requires:
            - test-backend
      - deploy-infrastructure:
          requires:
          - audit-frontend
          - audit-backend
      - configure-infrastructure:
          requires:
            - deploy-infrastructure
      - run-migrations:
          requires:
            - configure-infrastructure
      - prepare-frontend-for-deployment:
          requires:
            - configure-infrastructure
      - deploy-frontend:
          requires:
            - prepare-frontend-for-deployment
      